// Mocks generated by Mockito 5.4.2 from annotations
// in disney_characters/test/domain/usecases/get_all_characters_by_name_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:disney_characters/core/failure/failure.dart' as _i5;
import 'package:disney_characters/src/domain/entities/character.dart' as _i6;
import 'package:disney_characters/src/domain/repositories/character_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CharacterRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharacterRepository extends _i1.Mock
    implements _i3.CharacterRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Character>> read({required int? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
          {#id: id},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Character>>.value(
            _FakeEither_0<_i5.Failure, _i6.Character>(
          this,
          Invocation.method(
            #read,
            [],
            {#id: id},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Character>>.value(
                _FakeEither_0<_i5.Failure, _i6.Character>(
          this,
          Invocation.method(
            #read,
            [],
            {#id: id},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Character>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Character>>> readAll(
          {required String? name}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAll,
          [],
          {#name: name},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Character>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Character>>(
          this,
          Invocation.method(
            #readAll,
            [],
            {#name: name},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Character>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Character>>(
          this,
          Invocation.method(
            #readAll,
            [],
            {#name: name},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Character>>>);
}
